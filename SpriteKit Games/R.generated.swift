//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: BunnyScene
      ///
      /// Key: BunnyScene
      var bunnyScene: RswiftResources.StringResource { .init(key: "BunnyScene", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Game Over!
      ///
      /// Key: GameOver
      var gameOver: RswiftResources.StringResource { .init(key: "GameOver", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: goal
      ///
      /// Key: Goal
      var goal: RswiftResources.StringResource { .init(key: "Goal", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Hero
      ///
      /// Key: Hero
      var hero: RswiftResources.StringResource { .init(key: "Hero", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: obstacle
      ///
      /// Key: Obstacle
      var obstacle: RswiftResources.StringResource { .init(key: "Obstacle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: obstacleLayer
      ///
      /// Key: ObstacleLayer
      var obstacleLayer: RswiftResources.StringResource { .init(key: "ObstacleLayer", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: previousScore
      ///
      /// Key: PreviousScore
      var previousScore: RswiftResources.StringResource { .init(key: "PreviousScore", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: resetButton
      ///
      /// Key: ResetButton
      var resetButton: RswiftResources.StringResource { .init(key: "ResetButton", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: scoreLabel
      ///
      /// Key: ScoreLabel
      var scoreLabel: RswiftResources.StringResource { .init(key: "ScoreLabel", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: scrollCloudLayer
      ///
      /// Key: ScrollCloudLayer
      var scrollCloudLayer: RswiftResources.StringResource { .init(key: "ScrollCloudLayer", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: scrollGroundlLayer
      ///
      /// Key: ScrollGroundlLayer
      var scrollGroundlLayer: RswiftResources.StringResource { .init(key: "ScrollGroundlLayer", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Shake
      ///
      /// Key: Shake
      var shake: RswiftResources.StringResource { .init(key: "Shake", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Tap to start!
      ///
      /// Key: Taptostart
      var taptostart: RswiftResources.StringResource { .init(key: "Taptostart", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: high
      ///
      /// Key: high
      var high: RswiftResources.StringResource { .init(key: "high", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: highScore
      ///
      /// Key: highScore
      var highScore: RswiftResources.StringResource { .init(key: "highScore", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: highScoreLabel
      ///
      /// Key: highScoreLabelName
      var highScoreLabelName: RswiftResources.StringResource { .init(key: "highScoreLabelName", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: orientation
      ///
      /// Key: orientation
      var orientation: RswiftResources.StringResource { .init(key: "orientation", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: pointsLabel
      ///
      /// Key: pointsLabelName
      var pointsLabelName: RswiftResources.StringResource { .init(key: "pointsLabelName", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: tapToStartLabel
      ///
      /// Key: tapToStartLabelName
      var tapToStartLabelName: RswiftResources.StringResource { .init(key: "tapToStartLabelName", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 13 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `background`.
    var background: RswiftResources.ImageResource { .init(name: "background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bg_crystals`.
    var bg_crystals: RswiftResources.ImageResource { .init(name: "bg_crystals", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bunny1`.
    var bunny1: RswiftResources.ImageResource { .init(name: "bunny1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bunny2`.
    var bunny2: RswiftResources.ImageResource { .init(name: "bunny2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `carrot_bottom`.
    var carrot_bottom: RswiftResources.ImageResource { .init(name: "carrot_bottom", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `carrot_top`.
    var carrot_top: RswiftResources.ImageResource { .init(name: "carrot_top", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clouds`.
    var clouds: RswiftResources.ImageResource { .init(name: "clouds", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ground`.
    var ground: RswiftResources.ImageResource { .init(name: "ground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lion`.
    var lion: RswiftResources.ImageResource { .init(name: "lion", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play_button`.
    var play_button: RswiftResources.ImageResource { .init(name: "play_button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rabbit`.
    var rabbit: RswiftResources.ImageResource { .init(name: "rabbit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `restart_button`.
    var restart_button: RswiftResources.ImageResource { .init(name: "restart_button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tree`.
    var tree: RswiftResources.ImageResource { .init(name: "tree", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Roboto-Black`.
    var robotoBlack: RswiftResources.FontResource { .init(name: "Roboto-Black", bundle: bundle, filename: "Roboto-Black.ttf") }

    /// Font `Roboto-BlackItalic`.
    var robotoBlackItalic: RswiftResources.FontResource { .init(name: "Roboto-BlackItalic", bundle: bundle, filename: "Roboto-BlackItalic.ttf") }

    /// Font `Roboto-Bold`.
    var robotoBold: RswiftResources.FontResource { .init(name: "Roboto-Bold", bundle: bundle, filename: "Roboto-Bold.ttf") }

    /// Font `Roboto-BoldItalic`.
    var robotoBoldItalic: RswiftResources.FontResource { .init(name: "Roboto-BoldItalic", bundle: bundle, filename: "Roboto-BoldItalic.ttf") }

    /// Font `Roboto-Italic`.
    var robotoItalic: RswiftResources.FontResource { .init(name: "Roboto-Italic", bundle: bundle, filename: "Roboto-Italic.ttf") }

    /// Font `Roboto-Light`.
    var robotoLight: RswiftResources.FontResource { .init(name: "Roboto-Light", bundle: bundle, filename: "Roboto-Light.ttf") }

    /// Font `Roboto-LightItalic`.
    var robotoLightItalic: RswiftResources.FontResource { .init(name: "Roboto-LightItalic", bundle: bundle, filename: "Roboto-LightItalic.ttf") }

    /// Font `Roboto-Medium`.
    var robotoMedium: RswiftResources.FontResource { .init(name: "Roboto-Medium", bundle: bundle, filename: "Roboto-Medium.ttf") }

    /// Font `Roboto-MediumItalic`.
    var robotoMediumItalic: RswiftResources.FontResource { .init(name: "Roboto-MediumItalic", bundle: bundle, filename: "Roboto-MediumItalic.ttf") }

    /// Font `Roboto-Regular`.
    var robotoRegular: RswiftResources.FontResource { .init(name: "Roboto-Regular", bundle: bundle, filename: "Roboto-Regular.ttf") }

    /// Font `Roboto-Thin`.
    var robotoThin: RswiftResources.FontResource { .init(name: "Roboto-Thin", bundle: bundle, filename: "Roboto-Thin.ttf") }

    /// Font `Roboto-ThinItalic`.
    var robotoThinItalic: RswiftResources.FontResource { .init(name: "Roboto-ThinItalic", bundle: bundle, filename: "Roboto-ThinItalic.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [robotoBlack, robotoBlackItalic, robotoBold, robotoBoldItalic, robotoItalic, robotoLight, robotoLightItalic, robotoMedium, robotoMediumItalic, robotoRegular, robotoThin, robotoThinItalic].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 17 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Actions.sks`.
    var actionsSks: RswiftResources.FileResource { .init(name: "Actions", pathExtension: "sks", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BunnyScene.sks`.
    var bunnySceneSks: RswiftResources.FileResource { .init(name: "BunnyScene", pathExtension: "sks", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Hero.sks`.
    var heroSks: RswiftResources.FileResource { .init(name: "Hero", pathExtension: "sks", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `MarioScene.sks`.
    var marioSceneSks: RswiftResources.FileResource { .init(name: "MarioScene", pathExtension: "sks", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ObstaclesScene.sks`.
    var obstaclesSceneSks: RswiftResources.FileResource { .init(name: "ObstaclesScene", pathExtension: "sks", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Black.ttf`.
    var robotoBlackTtf: RswiftResources.FileResource { .init(name: "Roboto-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-BlackItalic.ttf`.
    var robotoBlackItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-BlackItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Bold.ttf`.
    var robotoBoldTtf: RswiftResources.FileResource { .init(name: "Roboto-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-BoldItalic.ttf`.
    var robotoBoldItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-BoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Italic.ttf`.
    var robotoItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-Italic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Light.ttf`.
    var robotoLightTtf: RswiftResources.FileResource { .init(name: "Roboto-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-LightItalic.ttf`.
    var robotoLightItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-LightItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Medium.ttf`.
    var robotoMediumTtf: RswiftResources.FileResource { .init(name: "Roboto-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-MediumItalic.ttf`.
    var robotoMediumItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-MediumItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Regular.ttf`.
    var robotoRegularTtf: RswiftResources.FileResource { .init(name: "Roboto-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Thin.ttf`.
    var robotoThinTtf: RswiftResources.FileResource { .init(name: "Roboto-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-ThinItalic.ttf`.
    var robotoThinItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-ThinItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var flappyRabit: flappyRabit { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var scoreScreenTemplate: scoreScreenTemplate { .init(bundle: bundle) }
    var superMario: superMario { .init(bundle: bundle) }

    func flappyRabit(bundle: Foundation.Bundle) -> flappyRabit {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func scoreScreenTemplate(bundle: Foundation.Bundle) -> scoreScreenTemplate {
      .init(bundle: bundle)
    }
    func superMario(bundle: Foundation.Bundle) -> superMario {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.flappyRabit.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.scoreScreenTemplate.validate()
      try self.superMario.validate()
    }


    /// Storyboard `FlappyRabit`.
    struct flappyRabit: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FlappyRabit"

      var flappyRabitViewController: RswiftResources.StoryboardViewControllerIdentifier<FlappyRabitViewController> { .init(identifier: "FlappyRabitViewController", storyboard: name, bundle: bundle) }
      var welcomeViewController: RswiftResources.StoryboardViewControllerIdentifier<WelcomeViewController> { .init(identifier: "WelcomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "play_button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play_button' is used in storyboard 'FlappyRabit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rabbit", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rabbit' is used in storyboard 'FlappyRabit', but couldn't be loaded.") }
        if flappyRabitViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'flappyRabitViewController' could not be loaded from storyboard 'FlappyRabit' as 'FlappyRabitViewController'.") }
        if welcomeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'FlappyRabit' as 'WelcomeViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Main"

      var gameViewController: RswiftResources.StoryboardViewControllerIdentifier<GameViewController> { .init(identifier: "GameViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if gameViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'gameViewController' could not be loaded from storyboard 'Main' as 'GameViewController'.") }
      }
    }

    /// Storyboard `ScoreScreenTemplate`.
    struct scoreScreenTemplate: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "ScoreScreenTemplate"

      var scoreVC: RswiftResources.StoryboardViewControllerIdentifier<ScoreViewController> { .init(identifier: "scoreVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'ScoreScreenTemplate', but couldn't be loaded.") } }
        if scoreVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'scoreVC' could not be loaded from storyboard 'ScoreScreenTemplate' as 'ScoreViewController'.") }
      }
    }

    /// Storyboard `SuperMario`.
    struct superMario: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SuperMario"

      var superMarioViewController: RswiftResources.StoryboardViewControllerIdentifier<SuperMarioViewController> { .init(identifier: "SuperMarioViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if superMarioViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'superMarioViewController' could not be loaded from storyboard 'SuperMario' as 'SuperMarioViewController'.") }
      }
    }
  }
}